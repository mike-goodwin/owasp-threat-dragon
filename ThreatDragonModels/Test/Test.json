{
  "summary": {
    "title": "Test"
  },
  "detail": {
    "contributors": [],
    "diagrams": [
      {
        "title": "nnn",
        "thumbnail": "./public/content/images/thumbnail.jpg",
        "id": 0,
        "diagramJson": {
          "cells": [
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 50,
                "y": 50
              },
              "angle": 0,
              "id": "5a9c7b39-9132-4abb-8d87-564f8ded0a1c",
              "z": 1,
              "hasOpenThreats": true,
              "threats": [
                {
                  "ruleId": "b2a6d40d-d3f8-4750-8e4d-c02cc84b13dc",
                  "title": "Generic spoofing threat",
                  "type": "Spoofing",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "A generic spoofing threat"
                },
                {
                  "ruleId": "4adaa48a-0345-4533-a189-64c98c4420dd",
                  "title": "Generic tampering threat",
                  "type": "Tampering",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "A generic tampering threat"
                },
                {
                  "ruleId": "87bc37e2-798e-4d68-bb96-feb1da26da48",
                  "title": "Generic repudiation threat",
                  "type": "Repudiation",
                  "status": "Open",
                  "severity": "Low",
                  "description": "A generic repudiation threat"
                },
                {
                  "ruleId": "13000296-b17d-4b72-9cc4-f5cc33f80e4c",
                  "title": "Generic information disclosure threat",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "A generic information disclosure threat"
                },
                {
                  "ruleId": "edb05d76-a695-455f-947b-7d67b78bc31d",
                  "title": "Generic DoS threat",
                  "type": "Denial of service",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "A generic DoS threat"
                },
                {
                  "ruleId": "c1377855-ea20-4c97-8861-f95c364fb8d2",
                  "title": "Generic elevation threat",
                  "type": "Elevation of privilege",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "description": "A generic elevation threat"
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "process 0"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 276,
                "y": 56
              },
              "angle": 0,
              "id": "a679a17a-a631-4cae-a5ad-c88c310a3769",
              "z": 2,
              "hasOpenThreats": true,
              "threats": [
                {
                  "ruleId": "b2a6d40d-d3f8-4750-8e4d-c02cc84b13dc",
                  "title": "Generic spoofing threat",
                  "type": "Spoofing",
                  "status": "Open",
                  "severity": "Low",
                  "description": "A generic spoofing threat 2"
                },
                {
                  "ruleId": "4adaa48a-0345-4533-a189-64c98c4420dd",
                  "title": "Generic tampering threat",
                  "type": "Tampering",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "A generic tampering threat"
                },
                {
                  "ruleId": "87bc37e2-798e-4d68-bb96-feb1da26da48",
                  "title": "Generic repudiation threat",
                  "type": "Repudiation",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "A generic repudiation threat"
                },
                {
                  "ruleId": "13000296-b17d-4b72-9cc4-f5cc33f80e4c",
                  "title": "Generic information disclosure threat",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "A generic information disclosure threat"
                },
                {
                  "ruleId": "edb05d76-a695-455f-947b-7d67b78bc31d",
                  "title": "Generic DoS threat",
                  "type": "Denial of service",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "A generic DoS threat"
                },
                {
                  "ruleId": "c1377855-ea20-4c97-8861-f95c364fb8d2",
                  "title": "Generic elevation threat",
                  "type": "Elevation of privilege",
                  "status": "Mitigated",
                  "severity": "High",
                  "description": "A generic elevation threat",
                  "mitigation": "Test mitigation"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "Test Title",
                  "type": "Tampering",
                  "description": "Test Description",
                  "mitigation": "Test Mitigation"
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "process 1"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "5a9c7b39-9132-4abb-8d87-564f8ded0a1c"
              },
              "target": {
                "id": "a679a17a-a631-4cae-a5ad-c88c310a3769"
              },
              "vertices": [
                {
                  "x": 246,
                  "y": 105
                }
              ],
              "id": "92cd59d1-1510-4bd7-a965-58576b9ade00",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "flow 2",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 3,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Actor",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 18,
                "y": 252
              },
              "angle": 0,
              "id": "69fdc002-85d9-4b65-b0c2-89fe10acc4ac",
              "z": 4,
              "hasOpenThreats": true,
              "threats": [
                {
                  "ruleId": "1.6",
                  "title": "Code Permission",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "High",
                  "description": "An active developer with access to unrelated module code may tamper or disclose sensitive project information (Interproject Code Access).",
                  "mitigation": "Throughout the development lifecycle, there are several mitigations that can be used:Within the Implementation phase, if a critical resource is being used, there should be a check to see if a resource has permissions/behavior which are not secure (such as a regular user being able to modify that resource).  If there are such behaviors or permissions that exist, the program should create an error or exit the program [10]. Within the Architecture and Design phase, one should split up the software components based on privilege level and if possible, control what data, functions and resources each component uses based the privilege level [10].  Another option in this phase is to create a separate environment within the system/program where only within that area or environment has an elevated privilege [8]. In the installation phase, default or most restrictive permissions should be set to avoid any code which doesn\\t have the permissions to be run.  Also, the assumption that a system administrator will change the settings based on a manual is incorrect [10]. In the System Configuration phase, The configurable, executable files and libraries should be only have read and write access by the system administrator [10]. In the Documentation phase, within any documentation, any configurations that are suggested must be secure, and do not affect the operation of the computer or program [10]. Code Quality"
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "actor 3"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "69fdc002-85d9-4b65-b0c2-89fe10acc4ac"
              },
              "target": {
                "id": "5a9c7b39-9132-4abb-8d87-564f8ded0a1c"
              },
              "vertices": [
                {
                  "x": 39,
                  "y": 194
                }
              ],
              "id": "0599592d-81ed-4457-af13-5ca595a51e99",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "flow 4",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 5,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Actor",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 240,
                "y": 236
              },
              "angle": 0,
              "id": "3069702c-336a-4378-a62c-fca72a2bcb97",
              "z": 6,
              "hasOpenThreats": true,
              "threats": [
                {
                  "ruleId": "1.6",
                  "title": "Code Permission",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "High",
                  "description": "An active developer with access to unrelated module code may tamper or disclose sensitive project information (Interproject Code Access).",
                  "mitigation": "Throughout the development lifecycle, there are several mitigations that can be used:Within the Implementation phase, if a critical resource is being used, there should be a check to see if a resource has permissions/behavior which are not secure (such as a regular user being able to modify that resource).  If there are such behaviors or permissions that exist, the program should create an error or exit the program [10]. Within the Architecture and Design phase, one should split up the software components based on privilege level and if possible, control what data, functions and resources each component uses based the privilege level [10].  Another option in this phase is to create a separate environment within the system/program where only within that area or environment has an elevated privilege [8]. In the installation phase, default or most restrictive permissions should be set to avoid any code which doesn\\t have the permissions to be run.  Also, the assumption that a system administrator will change the settings based on a manual is incorrect [10]. In the System Configuration phase, The configurable, executable files and libraries should be only have read and write access by the system administrator [10]. In the Documentation phase, within any documentation, any configurations that are suggested must be secure, and do not affect the operation of the computer or program [10]. Code Quality",
                  "references": [
                    "https://www.google.ca"
                  ]
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "actor 5"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "3069702c-336a-4378-a62c-fca72a2bcb97"
              },
              "target": {
                "id": "a679a17a-a631-4cae-a5ad-c88c310a3769"
              },
              "vertices": [],
              "id": "1bae9d49-27d4-4c50-9f72-0901e0150564",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "flow 8",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 9,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            }
          ]
        },
        "size": {
          "height": 590,
          "width": 790
        }
      },
      {
        "title": "bbb",
        "thumbnail": "./public/content/images/thumbnail.jpg",
        "id": 1,
        "diagramJson": {
          "cells": [
            {
              "type": "tm.Actor",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 50,
                "y": 50
              },
              "angle": 0,
              "id": "0bb2ef48-5f32-4961-8136-9560e5d209f0",
              "z": 1,
              "hasOpenThreats": false,
              "threats": [],
              "isEncryptedActor": false,
              "providesAuthenticationActor": false,
              "clientEHealthDevice": false,
              "mobileDevice": false,
              "desktopDevice": false,
              "storesHealthDataLocally": false,
              "forwardsHealthDataCloud": false,
              "privilegeLevelForActor": false,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                "text": {
                  "text": "Browser"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 256,
                "y": 171
              },
              "angle": 0,
              "id": "255893f4-89e0-4e62-be74-acb98054d4bd",
              "z": 2,
              "hasOpenThreats": false,
              "threats": [],
              "isEncryptedProcess": false,
              "programmingLanguageProcess": false,
              "privilegeLevelForProcess": false,
              "isAWebApplication": false,
              "isANetworkSwitch": false,
              "isARoutingProcess": false,
              "isAWirelessAccessProcess": false,
              "isAConfigurationProcess": false,
              "isAIPSecHostProcess": false,
              "providesAuthenticationProcess": false,
              "isALogProcess": false,
              "usesExternalResourcesProcess": false,
              "usesResourcesDirectlyProcess": false,
              "validatesCertProcess": false,
              "localAccessProcess": false,
              "validatesInputProcess": false,
              "validateXMLProcess": false,
              "userInputProcess": false,
              "thirdPartyProcess": false,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                "text": {
                  "text": "Web\nApplication"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Store",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 27,
                "y": 423
              },
              "angle": 0,
              "id": "50dc4c8d-6b4a-41fb-b99a-159e11a255bd",
              "z": 3,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "title": "Credentials should be encrypted",
                  "type": "Information disclosure",
                  "description": "The Web Application Config stores credentials used by the Web App to access the message queue. These could be stolen by an attacker and used to read confidential data or place poison message on the queue.",
                  "mitigation": "The Message Queue should be encrypted."
                }
              ],
              "storesCredentials": true,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Web Application Config"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Store",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 351,
                "y": 429
              },
              "angle": 0,
              "id": "11d325c8-b5b7-4ddd-80f2-07c50e9ee901",
              "z": 4,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "Unauthorized access",
                  "type": "Information disclosure",
                  "description": "An attacker could make a query call on the DB",
                  "mitigation": "Require all queries to be authenticated."
                },
                {
                  "status": "Mitigated",
                  "severity": "Medium",
                  "title": "Credential theft",
                  "type": "Information disclosure",
                  "description": "An attacker could obtain the DB credentials and use them to make unauthorized queries.",
                  "mitigation": "Use a firewall to restrict access to the DB to only the Background Worker IP address."
                }
              ],
              "isALog": true,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Database"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Store",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 705,
                "y": 429
              },
              "angle": 0,
              "id": "bf482dd6-4dc7-4ae4-89f7-9233969fb177",
              "z": 5,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "Accessing DB credentials",
                  "type": "Information disclosure",
                  "description": "The Background Worker configuration stores the credentials used by the worker to access the DB. An attacker could compromise the Background Worker and get access to the DB credentials.",
                  "mitigation": "Encrypt the DB credentials in the configuration file.\n\nExpire and replace the DB credentials regularly."
                }
              ],
              "storesCredentials": true,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Worker Config"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 709,
                "y": 176
              },
              "angle": 0,
              "id": "50a179fa-407d-4a00-b775-e67ec4fd48e7",
              "z": 6,
              "hasOpenThreats": false,
              "threats": [],
              "isEncryptedProcess": false,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                "text": {
                  "text": "Background\nWorker"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "50a179fa-407d-4a00-b775-e67ec4fd48e7"
              },
              "target": {
                "id": "11d325c8-b5b7-4ddd-80f2-07c50e9ee901"
              },
              "vertices": [
                {
                  "x": 666,
                  "y": 381
                }
              ],
              "id": "cde56adf-7534-4287-a4dc-7af087e3be77",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "Worker Queries",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 7,
              "hasOpenThreats": false,
              "isEncrypted": true,
              "threats": [
                {
                  "ruleId": "6.4",
                  "title": "Improper Input Validation",
                  "type": "Tampering",
                  "status": "Open",
                  "severity": "High",
                  "description": "The product does not validate or incorrectly validates input that can affect the control flow or data flow of a program. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.[25]",
                  "mitigation": "Use an input validation framework such as Struts or the OWASP ESAPI Validation API.  If you use Struts, be mindful of Struts Validation ProblemsUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application.  Remember that such inputs may be obtained indirectly through API calls. Assume all input is malicious.  Use an \"accept known good\" input validation strategy, i. e. , use a whitelist of acceptable inputs that strictly conform to specifications.  Reject any input that does not strictly conform to specifications or transform it into something that does.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules.  As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue. \" Do not rely exclusively on looking for malicious or malformed inputs (i. e. , do not rely on a blacklist).  A blacklist is likely to miss at least one undesirable input, especially if the code\\s environment changes.  This can give attackers enough room to bypass the intended validation.  However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid client-side enforcement of server-side securityAttackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely.  Then, these modified values would be submitted to the server. Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session[25]"
                }
              ],
              "isEncryptedFlow": true,
              "isPublicNetwork": true,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "11d325c8-b5b7-4ddd-80f2-07c50e9ee901"
              },
              "target": {
                "id": "50a179fa-407d-4a00-b775-e67ec4fd48e7"
              },
              "vertices": [
                {
                  "x": 590,
                  "y": 353
                }
              ],
              "id": "ad103c08-6db1-4994-aa31-2af10b7eab8b",
              "labels": [
                {
                  "position": {
                    "distance": 0.5693911339151382,
                    "offset": -3.777376836165786
                  },
                  "attrs": {
                    "text": {
                      "text": "Worker Query Results",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 8,
              "hasOpenThreats": false,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Low",
                  "title": "Man in the middle attack",
                  "type": "Information disclosure",
                  "description": "An attacker could intercept the DB queries in transit and obtain sensitive information, such as DB credentials, query parameters or query results (is unlikely since the data flow is over a private network).",
                  "mitigation": "Enforce an encrypted connection at the DB server"
                }
              ],
              "isEncryptedFlow": true,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "11d325c8-b5b7-4ddd-80f2-07c50e9ee901"
              },
              "target": {
                "id": "255893f4-89e0-4e62-be74-acb98054d4bd"
              },
              "vertices": [
                {
                  "x": 438,
                  "y": 265
                }
              ],
              "id": "05b625e7-e1ad-42bb-ade0-a2bd1a4734e5",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "Web App Query\nResults",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 9,
              "hasOpenThreats": false,
              "isEncrypted": true,
              "threats": [
                {
                  "ruleId": "8.9",
                  "title": "Broken/Insecure Cryptography",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "High",
                  "description": "This threat is cause when an adversary has physical access to data that has been encrypted improperly, or mobile malware acting on an adversary's behalf. This can be done in several ways such as decryption access to the device or network traffic capture, or malicious apps on the device with access to the encrypted data Hello.",
                  "mitigation": "To mitigate this threat, avoid using algorithms or protocols that are unsecure such as RC2, MD4, MD5 and SHA1.  A stronger cryptographic algorithm that is widely known to be secure should be used.  Currently, AES is one of the most secure encryption algorithms and is recommended to be used.   [33] [34] [52]"
                },
                {
                  "ruleId": "8.16",
                  "title": "Improper Session Handling",
                  "type": "Spoofing",
                  "status": "Open",
                  "severity": "High",
                  "description": "Anyone or any mobile app with access to HTTP/S traffic, cookie data, etc.  Possible attack vectors include physical access to the device, and network traffic capture, or malware on the mobile device. Essentially an adversary that has access to the session tokens can impersonate the user by submitting the token to the backend server for any sensitive transactions such as credit card payments or health information like EKG results sent to a doctor. [59]",
                  "mitigation": "Validate sessions on the backend by ensuring all session invalidation events are executed on the server side and not just on the mobile app. Add adequate timeout protection to prevent the malicious potential for an unauthorized user to gain access to an existing session and assume the role of that user.  Timeout periods vary accordingly based on the application, but some good guidelines are: 15 minutes for high security apps, 30 minutes for medium security apps, and 1 hour for low security apps. Properly reset cookies during authentication state changes, by destroying sessions on the server side and making sure that the cookies presented as a part of the previous sessions are no longer acceptedIn addition to properly invalidating tokens on the server side during key application events, make sure tokens are generated properly by using well-established and industry standard methods of creating tokens.  Visit the following websites for more details: https://www. pcisecuritystandards. org/documents/Tokenization_Product_Security_Guidelines. pdf and https://tools. ietf. org/html/rfc7519 for JSON Web Token (JWT) and https://www. ietf. org/rfc/rfc6750. txt for Bearer Token Usage[59]"
                }
              ],
              "isEncryptedFlow": false,
              "isPublicNetwork": false,
              "bluetoothInterface": false,
              "wifiInterface": false,
              "cellularInterface": false,
              "usesTLS": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "255893f4-89e0-4e62-be74-acb98054d4bd"
              },
              "target": {
                "id": "11d325c8-b5b7-4ddd-80f2-07c50e9ee901"
              },
              "vertices": [
                {
                  "x": 365,
                  "y": 321
                }
              ],
              "id": "f382830f-3258-402d-85fa-ed179bd265f2",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "Queries",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 10,
              "hasOpenThreats": false,
              "isEncrypted": true,
              "threats": [
                {
                  "ruleId": "6.2",
                  "title": "Expression Language Injection",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "High",
                  "description": "Server-side code injection vulnerabilities arise when an application incorporates user-controllable data into a string that is dynamically evaluated by a code interpreter. If the user data is not strictly validated, an attacker can use crafted input to modify the code to be executed and inject arbitrary code that will be executed by the server. Server-side code injection vulnerabilities are usually very serious and lead to complete compromise of the application's data and functionality, and often of the server that is hosting the application. It may also be possible to use the server as a platform for further attacks against other systems.[23]",
                  "mitigation": "Whenever possible, applications should avoid incorporating user-controllable data into dynamically evaluated code.  In almost every situation, there are safer alternative methods of implementing application functions, which cannot be manipulated to inject arbitrary code into the server\\s processing. If it is considered unavoidable to incorporate user-supplied data into dynamically evaluated code, then the data should be strictly validated.  Ideally, a whitelist of specific accepted values should be used.  Otherwise, only short alphanumeric strings should be accepted.  Input containing any other data, including any conceivable code metacharacters, should be rejected. [23]"
                },
                {
                  "ruleId": "6.4",
                  "title": "Improper Input Validation",
                  "type": "Tampering",
                  "status": "Open",
                  "severity": "High",
                  "description": "The product does not validate or incorrectly validates input that can affect the control flow or data flow of a program. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.[25]",
                  "mitigation": "Use an input validation framework such as Struts or the OWASP ESAPI Validation API.  If you use Struts, be mindful of Struts Validation ProblemsUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application.  Remember that such inputs may be obtained indirectly through API calls. Assume all input is malicious.  Use an \"accept known good\" input validation strategy, i. e. , use a whitelist of acceptable inputs that strictly conform to specifications.  Reject any input that does not strictly conform to specifications or transform it into something that does.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules.  As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue. \" Do not rely exclusively on looking for malicious or malformed inputs (i. e. , do not rely on a blacklist).  A blacklist is likely to miss at least one undesirable input, especially if the code\\s environment changes.  This can give attackers enough room to bypass the intended validation.  However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid client-side enforcement of server-side securityAttackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely.  Then, these modified values would be submitted to the server. Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session[25]"
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "50dc4c8d-6b4a-41fb-b99a-159e11a255bd"
              },
              "target": {
                "id": "255893f4-89e0-4e62-be74-acb98054d4bd"
              },
              "vertices": [
                {
                  "x": 178,
                  "y": 271
                }
              ],
              "id": "dde8ccfc-1fff-4a6f-830c-d758cfc6b51d",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "Read web app config",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 11,
              "hasOpenThreats": false,
              "outOfScope": true,
              "reasonOutOfScope": "The data flow represents a read from the file system",
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isOutOfScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "bf482dd6-4dc7-4ae4-89f7-9233969fb177"
              },
              "target": {
                "id": "50a179fa-407d-4a00-b775-e67ec4fd48e7"
              },
              "vertices": [
                {
                  "x": 846,
                  "y": 333
                }
              ],
              "id": "e82c6701-190c-46ad-81cd-be8bdc699d42",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "Read worker config",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 12,
              "hasOpenThreats": false,
              "outOfScope": true,
              "reasonOutOfScope": "The data flow represents a read from the file system",
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isOutOfScope"
                }
              }
            },
            {
              "type": "tm.Store",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 676,
                "y": 20
              },
              "angle": 0,
              "id": "ae2338b6-9abf-42ab-aca5-9bf209a12e57",
              "z": 13,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "Message tampering",
                  "type": "Tampering",
                  "description": "Messages on the queue could be tampered with, causing incorrect processing by the Background Worker",
                  "mitigation": "Sign all queue messages at the Web Server. Validate the message signature at the Background Worker and reject any message with a missing or invalid signature. Log any failed messages."
                },
                {
                  "status": "Open",
                  "severity": "Low",
                  "title": "Message Secrecy",
                  "type": "Information disclosure",
                  "description": "The data flow between the Web Application and the Background Worker is not point-to-point and therefore end-to-end secrecy cannot be provided at the transport layer. Messages could be read by an attacker at rest in the Message Queue.",
                  "mitigation": "Use message level encryption for high sensitivity data (e.g. security tokens) in messages."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "title": "Fake messages in queue",
                  "type": "Spoofing",
                  "description": "An attacker could put a fake message on the queue, causing the Background Worker to do incorrect processing.",
                  "mitigation": "Restrict access to the queue to the IP address of the Web Server and Background Worker.\n\nImplement authentication on the queue endpoint."
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Message Queue"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "0bb2ef48-5f32-4961-8136-9560e5d209f0"
              },
              "target": {
                "id": "255893f4-89e0-4e62-be74-acb98054d4bd"
              },
              "vertices": [
                {
                  "x": 246,
                  "y": 84
                }
              ],
              "id": "2d90423b-1fa9-4060-9ecc-01c5509a1640",
              "labels": [
                {
                  "position": {
                    "distance": 0.6787019286367256,
                    "offset": 5.397182970773429
                  },
                  "attrs": {
                    "text": {
                      "text": "Web Request",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 14,
              "hasOpenThreats": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "threats": [
                {
                  "ruleId": "3.6",
                  "title": "Hard-coded Cryptographic Key",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "High",
                  "description": "The use of a hard-coded cryptographic key tremendously increases the possibility that encrypted data may be recovered.Authentication: If hard-coded cryptographic keys are used, it is almost certain that malicious users will gain access through the account in question.",
                  "mitigation": "To mitigate against this threat, this practice of hard coding the cryptographic key should be avoided to avoid exposing the cryptographic key to a potential adversary for exploitation [32]"
                },
                {
                  "ruleId": "3.7",
                  "title": "Faulty Cryptographic Algorithm",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "High",
                  "description": "Attempting to create non-standard and non-tested algorithms, using weak algorithms, or applying algorithms incorrectly will pose a high weakness to data that is meant to be secure.",
                  "mitigation": "To mitigate this threat, a stronger cryptographic algorithm that is widely known to be secure should be used.  Currently, AES is one of the most secure encryption algorithms and is recommended to be used.   [33] [34]Environment (Platform Vulnerabilities)"
                },
                {
                  "ruleId": "4.2",
                  "title": "Insecure Transport",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "High",
                  "description": "The application configuration should ensure that SSL is used for all access-controlled pages.If an application uses SSL to guarantee confidential communication with client browsers, the application configuration should make it impossible to view any access-controlled page without SSL. However, it is not an uncommon problem that the configuration of the application fails to enforce the use of SSL on pages that contain sensitive data.There are three common ways for SSL to be bypassed:A user manually enters the URL and types \"HTTP\" rather than \"HTTPS\".Attackers intentionally send a user to an insecure URL.A programmer erroneously creates a relative link to a page in the application, failing to switch from HTTP to HTTPS. (This is particularly easy to do when the link moves between public and secured areas on a web site.)",
                  "mitigation": "The first and foremost control that needs to be applied is to check for a lack of transport encryption.  This can be done by:Reviewing network traffic of the device, its mobile application and any cloud connections to determine if any information is passed in clear textReviewing the use of SSL or TLS to ensure it is up to date and properly implementedReviewing the use of any encryption protocols to ensure they are recommended and acceptedIn order to ensure enough transport encryption:Ensuring data is encrypted using protocols such as SSL and TLS while transiting networks. Ensuring other industry standard encryption techniques are utilized to protect data during transport if SSL or TLS are not available. Ensuring only accepted encryption standards are used and avoid using proprietary encryption protocols. Ensuring the message payload encryptionEnsuring the secure encryption key handshaking. Ensuring received data integrity verification. [4]"
                },
                {
                  "ruleId": "4.3",
                  "title": "Insufficient Session-ID Length",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "High",
                  "description": "Session identifiers should be at least 128 bits long to prevent brute-force session guessing attacks. A shorter session identifier leaves the application open to brute-force session guessing attacks. If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking).  [7]",
                  "mitigation": "Session identifiers should be at least 128 bits long to prevent brute-force session guessing.  Assume a 128-bit session identifier that provides 64 bits of entropy.  With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed.  Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years. A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment.  However, any users that abandon their sessions without logging out will increase this number.  (This is one of many good reasons to have a short inactive session timeout. )[7]"
                }
              ],
              "isEncryptedFlow": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "255893f4-89e0-4e62-be74-acb98054d4bd"
              },
              "target": {
                "id": "0bb2ef48-5f32-4961-8136-9560e5d209f0"
              },
              "vertices": [
                {
                  "x": 114,
                  "y": 188
                }
              ],
              "id": "06e4e999-3e29-4faa-ba0b-439fcde24517",
              "labels": [
                {
                  "position": {
                    "distance": 0.8275584014287158,
                    "offset": -27.26677341578761
                  },
                  "attrs": {
                    "text": {
                      "text": "Web Response",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 15,
              "hasOpenThreats": false,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "threats": [
                {
                  "ruleId": "3.6",
                  "title": "Hard-coded Cryptographic Key",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "High",
                  "description": "The use of a hard-coded cryptographic key tremendously increases the possibility that encrypted data may be recovered.Authentication: If hard-coded cryptographic keys are used, it is almost certain that malicious users will gain access through the account in question.",
                  "mitigation": "To mitigate against this threat, this practice of hard coding the cryptographic key should be avoided to avoid exposing the cryptographic key to a potential adversary for exploitation [32]"
                },
                {
                  "ruleId": "3.7",
                  "title": "Faulty Cryptographic Algorithm",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "High",
                  "description": "Attempting to create non-standard and non-tested algorithms, using weak algorithms, or applying algorithms incorrectly will pose a high weakness to data that is meant to be secure.",
                  "mitigation": "To mitigate this threat, a stronger cryptographic algorithm that is widely known to be secure should be used.  Currently, AES is one of the most secure encryption algorithms and is recommended to be used.   [33] [34]Environment (Platform Vulnerabilities)"
                },
                {
                  "ruleId": "4.2",
                  "title": "Insecure Transport",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "High",
                  "description": "The application configuration should ensure that SSL is used for all access-controlled pages.If an application uses SSL to guarantee confidential communication with client browsers, the application configuration should make it impossible to view any access-controlled page without SSL. However, it is not an uncommon problem that the configuration of the application fails to enforce the use of SSL on pages that contain sensitive data.There are three common ways for SSL to be bypassed:A user manually enters the URL and types \"HTTP\" rather than \"HTTPS\".Attackers intentionally send a user to an insecure URL.A programmer erroneously creates a relative link to a page in the application, failing to switch from HTTP to HTTPS. (This is particularly easy to do when the link moves between public and secured areas on a web site.)",
                  "mitigation": "The first and foremost control that needs to be applied is to check for a lack of transport encryption.  This can be done by:Reviewing network traffic of the device, its mobile application and any cloud connections to determine if any information is passed in clear textReviewing the use of SSL or TLS to ensure it is up to date and properly implementedReviewing the use of any encryption protocols to ensure they are recommended and acceptedIn order to ensure enough transport encryption:Ensuring data is encrypted using protocols such as SSL and TLS while transiting networks. Ensuring other industry standard encryption techniques are utilized to protect data during transport if SSL or TLS are not available. Ensuring only accepted encryption standards are used and avoid using proprietary encryption protocols. Ensuring the message payload encryptionEnsuring the secure encryption key handshaking. Ensuring received data integrity verification. [4]"
                },
                {
                  "ruleId": "4.3",
                  "title": "Insufficient Session-ID Length",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "High",
                  "description": "Session identifiers should be at least 128 bits long to prevent brute-force session guessing attacks. A shorter session identifier leaves the application open to brute-force session guessing attacks. If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking).  [7]",
                  "mitigation": "Session identifiers should be at least 128 bits long to prevent brute-force session guessing.  Assume a 128-bit session identifier that provides 64 bits of entropy.  With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed.  Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years. A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment.  However, any users that abandon their sessions without logging out will increase this number.  (This is one of many good reasons to have a short inactive session timeout. )[7]"
                }
              ],
              "isEncryptedFlow": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "ae2338b6-9abf-42ab-aca5-9bf209a12e57"
              },
              "target": {
                "id": "50a179fa-407d-4a00-b775-e67ec4fd48e7"
              },
              "vertices": [
                {
                  "x": 673,
                  "y": 143
                }
              ],
              "id": "3a4dd18a-677d-453f-a58d-e34756cbc90c",
              "labels": [
                {
                  "position": {
                    "distance": 0.37521194545892816,
                    "offset": 8.234254532959312
                  },
                  "attrs": {
                    "text": {
                      "text": "Message",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 16,
              "hasOpenThreats": false,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "title": "Data flow should use HTTP/S",
                  "type": "Information disclosure",
                  "description": "These requests are made over the public internet and could be intercepted by an attacker.",
                  "mitigation": "The requests should require HTTP/S. This will provide confidentiality and integrity. HTTP should not be supported."
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "255893f4-89e0-4e62-be74-acb98054d4bd"
              },
              "target": {
                "id": "ae2338b6-9abf-42ab-aca5-9bf209a12e57"
              },
              "vertices": [
                {
                  "x": 523,
                  "y": 94
                }
              ],
              "id": "bdef3299-7faa-48cd-86c8-2121a545bb87",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "Put Message",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 17,
              "hasOpenThreats": false,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "title": "Data flow should use HTTP/S",
                  "type": "Information disclosure",
                  "description": "These requests are made over the public internet and could be intercepted by an attacker.",
                  "mitigation": "The requests should require HTTP/S. This will provide confidentiality and integrity. HTTP should not be supported."
                }
              ],
              "isPublicNetwork": false,
              "isEncryptedFlow": true,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Boundary",
              "smooth": true,
              "source": {
                "x": 414,
                "y": 19
              },
              "target": {
                "x": 586,
                "y": 154
              },
              "vertices": [
                {
                  "x": 448,
                  "y": 141
                }
              ],
              "id": "87ffd8e0-2621-43ce-b024-458622a726d1",
              "z": 18,
              "attrs": {}
            },
            {
              "type": "tm.Boundary",
              "smooth": true,
              "source": {
                "x": 881,
                "y": 179
              },
              "target": {
                "x": 659,
                "y": 188
              },
              "vertices": [
                {
                  "x": 761,
                  "y": 129
                }
              ],
              "id": "478a0205-61b6-47b3-8c83-2708f37fbca8",
              "z": 19,
              "attrs": {}
            },
            {
              "type": "tm.Boundary",
              "smooth": true,
              "source": {
                "x": 136,
                "y": 233
              },
              "target": {
                "x": 301,
                "y": 148
              },
              "vertices": [
                {
                  "x": 193,
                  "y": 149
                }
              ],
              "id": "1eaf265d-fe4f-446b-a57a-cf27446f253e",
              "z": 20,
              "attrs": {}
            },
            {
              "type": "tm.Boundary",
              "smooth": true,
              "source": {
                "x": 624,
                "y": 446
              },
              "target": {
                "x": 296,
                "y": 375
              },
              "vertices": [
                {
                  "x": 536,
                  "y": 235
                }
              ],
              "id": "94860a77-ebda-4eeb-8db2-5fc647917f62",
              "z": 21,
              "attrs": {}
            },
            {
              "type": "tm.SmartWatch",
              "size": {
                "width": 80,
                "height": 80
              },
              "position": {
                "x": 330,
                "y": 6
              },
              "angle": 0,
              "id": "a6c4960a-f486-4651-af2f-4e0b99e650c8",
              "z": 22,
              "hasOpenThreats": true,
              "privilegeLevelForSmartWatch": true,
              "threats": [
                {
                  "ruleId": "1.5",
                  "title": "Least Privilege Violation",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.When a program calls a privileged function, such as chroot(), it must first acquire root privilege. As soon as the privileged operation has completed, the program should drop root privilege and return to the privilege level of the invoking user.",
                  "mitigation": "There are several ways to mitigate the least privilege violation:Split an individual components into several components, and assign lower privilege levels to those components [8]. Identify areas in the system which have that elevated privilege and use those  components instead to accomplish the task [8]. Create a separate environment within the system/program where only within that area or environment has an elevated privilege [8]. ",
                  "references": [
                    {
                      "name": "CWE-272: Least Privilege Violation",
                      "link": "https://cwe.mitre.org/data/definitions/272.html"
                    }
                  ],
                  "examples": [
                    {
                      "language": {
                        "name": "C",
                        "highlightAlias": "c"
                      },
                      "preText": "The following code calls chroot() to restrict the application to a subset of the filesystem below APP_HOME in order to prevent an attacker from using the program to gain unauthorized access to files located elsewhere. The code then opens a file specified by the user and processes the contents of the file.",
                      "postText": "Constraining the process inside the application's home directory before opening any files is a valuable security measure. However, the absence of a call to setuid() with some non-zero value means the application is continuing to operate with unnecessary root privileges. Any successful exploit carried out by an attacker against the application can now result in a privilege escalation attack because any malicious operations will be performed with the privileges of the superuser. If the application drops to the privilege level of a non-root user, the potential for damage is substantially reduced.",
                      "code": "chroot(APP_HOME);\nchdir(\"/\");\nFILE* data = fopen(argv[1], \"r+\");\n..."
                    },
                    {
                      "language": {
                        "name": "Markup",
                        "highlightAlias": "markup"
                      },
                      "preText": "This is a test HTML example",
                      "code": "<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t</head>\n\t<body>\n\t</body>\n</html>"
                    }
                  ]
                }
              ],
              "attrs": {
                "text": {
                  "ref-y": 90,
                  "text": "Smart Watch 21"
                },
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Pacemaker",
              "size": {
                "width": 80,
                "height": 80
              },
              "position": {
                "x": 233,
                "y": 411
              },
              "angle": 0,
              "id": "565c77ed-083c-4911-b631-aeb7e23ac7d6",
              "z": 23,
              "hasOpenThreats": true,
              "isEncryptedPacemaker": false,
              "programmingLanguagePacemaker": false,
              "privilegeLevelForPacemaker": true,
              "threats": [
                {
                  "ruleId": "6.9",
                  "title": "Unchecked Return Value",
                  "type": "Tampering",
                  "status": "Open",
                  "severity": "Low",
                  "description": "The software does not check the return value froma method or function, which can prevent it fromdetecting unexpected states and conditions. Twocommon programmer assumptions are \"thisfunction call can never fail\" and \"it doesn'tmatter if this function call fails\". If an attacker canforce the function to fail or otherwise return a valuethat is not expected, then the subsequent programlogic could lead to a vulnerability, because thesoftware is not in a state that the programmerassumes. For example, if the program calls afunction to drop privileges but does not check thereturn code to ensure that privileges weresuccessfully dropped, then the program willcontinue to operate with the higher privileges. [40]",
                  "mitigation": "To mitigate this threat, three techniques must beapplied to all functions in the given program that isbeing evaluated:Ensure all of the functions that return a value,actually return a value and confirm that the value isexpected.Ensure within each function, that the possible ofreturn values are coveredWithin each function, ensure that there is acheck/default value when there is an error. [40]",
                  "references": [
                    {
                      "name": "CWE-252: Unchecked Return Value",
                      "link": "https://cwe.mitre.org/data/definitions/252.html"
                    }
                  ],
                  "examples": [
                    {
                      "language": {
                        "name": "C",
                        "highlightAlias": "c"
                      },
                      "preText": "Consider the following code segment:",
                      "postText": "The programmer expects that when fgets() returns, buf will contain a null-terminated string of length 9 or less. But if an I/O error occurs, fgets() will not null-terminate buf. Furthermore, if the end of the file is reached before any characters are read, fgets() returns without writing anything to buf. In both of these situations, fgets() signals that something unusual has happened by returning NULL, but in this code, the warning will not be noticed. The lack of a null terminator in buf can result in a buffer overflow in the subsequent call to strcpy().",
                      "code": "char buf[10], cp_buf[10];\nfgets(buf, 10, stdin);\nstrcpy(cp_buf, buf);"
                    },
                    {
                      "language": {
                        "name": "C",
                        "highlightAlias": "c"
                      },
                      "preText": "The following code does not check to see if memory allocation succeeded before attempting to use the pointer returned by malloc().",
                      "postText": "The traditional defense of this coding error is: \"If my program runs out of memory, it will fail. It doesn't matter whether I handle the error or simply allow the program to die with a segmentation fault when it tries to dereference the null pointer.\" This argument ignores three important considerations:\n\nDepending upon the type and size of the application, it may be possible to free memory that is being used elsewhere so that execution can continue.\nIt is impossible for the program to perform a graceful exit if required. If the program is performing an atomic operation, it can leave the system in an inconsistent state.\nThe programmer has lost the opportunity to record diagnostic information. Did the call to malloc() fail because req_size was too large or because there were too many requests being handled at the same time? Or was it caused by a memory leak that has built up over time? Without handling the error, there is no way to know.",
                      "code": "buf = (char*) malloc(req_size);\nstrncpy(buf, xfer, req_size);"
                    }
                  ]
                },
                {
                  "ruleId": "7.10",
                  "title": "Security Decisions Via Untrusted Inputs",
                  "type": "Tampering",
                  "status": "Open",
                  "severity": "High",
                  "description": "This threat involves entities that can pass untrustedinputs to the sensitive method calls. Examples ofsuch entities include, but are not limited to, users,malware and vulnerable apps  An attacker withaccess to app can intercept intermediate calls andmanipulate results via parameter tampering. [58]",
                  "mitigation": "To mitigate this threat, avoid usingdepreciated/unsupported methods for eachplatform that the application is being used. As anexample, for iOS, avoid using the handleOpenURLmethod to process URL scheme calls. Find analternative method that is supported by theplatform [58].",
                  "references": [
                    {
                      "name": "Security Decisions via Untrusted Inputs",
                      "link": "https://www.owasp.org/index.php/Mobile_Top_10_2014-M8"
                    }
                  ]
                },
                {
                  "ruleId": "10.2",
                  "title": "Process Control",
                  "type": "Tampering",
                  "status": "Open",
                  "severity": "High",
                  "description": "Executing commands or loading libraries from anuntrusted source or in an untrusted environmentcan cause an application to execute maliciouscommands (and payloads) on behalf of an attacker[85].",
                  "mitigation": "To mitigate this threat, libraries and frameworksthat are used must be from a trusted source, wherethese libraries can be relied upon and not bemaliciously used by an adversary. [85]",
                  "references": [
                    {
                      "name": "CWE-114: Process Control",
                      "link": "https://cwe.mitre.org/data/definitions/114.html"
                    }
                  ]
                },
                {
                  "ruleId": "10.9",
                  "title": "Privilege Dropping or Lowering Errors",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "High",
                  "description": "The software does not drop privileges beforepassing control of a resource to an actor that doesnot have those privileges [92].",
                  "mitigation": "To mitigate this threat, three techniques arepossible counter measures to properly manageprivileges in different contexts. There should bespecific trust zones in the system, the least privilegeprinciple should be in effect where the access rightsof each user are given the minimum privilege levelto do their task as well, privileges should beseparated where multiple conditions need to bemet to access [92].",
                  "references": [
                    {
                      "name": "CWE-271: Privilege Dropping / Lowering Errors",
                      "link": "https://cwe.mitre.org/data/definitions/271.html"
                    }
                  ]
                },
                {
                  "ruleId": "10.5",
                  "title": "Privilege Defined With Unsafe Actions",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "High",
                  "description": "A particular privilege, role, capability, or right canbe used to perform unsafe actions that were notintended, even when it is assigned to the correctentity [88].",
                  "mitigation": "To mitigate this threat, the settings, managementsand handling of privileges must be managedcarefully. There should be accounts with limitedprivileges if there is a task that needs to be done,with very specific privilege levels [88].",
                  "references": [
                    {
                      "name": "CWE-267: Privilege Defined With Unsafe Actions",
                      "link": "https://cwe.mitre.org/data/definitions/267.html"
                    }
                  ]
                },
                {
                  "ruleId": "10.8",
                  "title": "Privilege Context Switching Error",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "The software does not properly manage privilegeswhile it is switching between different contexts thathave different privileges or spheres of control [91].",
                  "mitigation": "To mitigate this threat, three techniques arepossible counter measures to properly manageprivileges in different contexts. There should bespecific trust zones in the system, the least privilegeprinciple should be in effect where the access rightsof each user are given the minimum privilege levelto do their task as well, privileges should beseparated where multiple conditions need to bemet to access [91].",
                  "references": [
                    {
                      "name": "CWE-270: Privilege Context Switching Error",
                      "link": "https://cwe.mitre.org/data/definitions/270.html"
                    }
                  ]
                },
                {
                  "ruleId": "10.6",
                  "title": "Privilege Chaining",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "High",
                  "description": "Two distinct privileges, roles, capabilities, or rightscan be combined in a way that allows an entity toperform unsafe actions that would not be allowedwithout that combination [89].",
                  "mitigation": "To mitigate this threat, the settings, managementsand handling of privileges must be managedcarefully. There should be accounts with limitedprivileges if there is a task that needs to be done,with very specific privilege levels. In addition tothose techniques, privileges should be separatedwhere multiple conditions need to be met to access[89].",
                  "references": [
                    {
                      "name": "CWE-268: Privilege Chaining",
                      "link": "https://cwe.mitre.org/data/definitions/268.html"
                    }
                  ]
                },
                {
                  "ruleId": "7.9",
                  "title": "Poor Client ",
                  "type": "Spoofing",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "This threat involves entities that can pass untrustedinputs to method calls made within mobile code.These types of issues are not necessarily securityissues in and of themselves but lead to securityvulnerabilities. For example, buffer overflows withinolder versions of Safari (a poor code qualityvulnerability) led to high risk drive-by Jailbreakattacks. Poor code-quality issues are typicallyexploited via malware or phishing scams. Anattacker will typically exploit vulnerabilities in thiscategory by supplying carefully crafted inputs to thevictim. These inputs are passed onto code thatresides within the mobile device where exploitationtakes place. Typical types of attacks will exploitmemory leaks and buffer overflows.[54]",
                  "mitigation": "To mitigate this threat, the followingcountermeasures should be considered:Consistent coding patterns, standards in anorganizationWrite code that is legible and documentedAny code that requires a buffer, the length of theinput should be checked, and the length should berestricted.Use third party tools to find buffer overflows andmemory leaks.Prioritize to fix any buffer overflows and memoryleaks that are present in the code before moving onto other issues.",
                  "references": [
                    {
                      "name": "Poor ",
                      "link": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality"
                    }
                  ]
                },
                {
                  "ruleId": "1.5",
                  "title": "Least Privilege Violation",
                  "type": "Elevation of privilege",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "description": "The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.When a program calls a privileged function, such as chroot(), it must first acquire root privilege. As soon as the privileged operation has completed, the program should drop root privilege and return to the privilege level of the invoking user.",
                  "mitigation": "There are several ways to mitigate the least privilege violation:Split an individual components into several components, and assign lower privilege levels to those components [8]. Identify areas in the system which have that elevated privilege and use those  components instead to accomplish the task [8]. Create a separate environment within the system/program where only within that area or environment has an elevated privilege [8]. ",
                  "references": [
                    {
                      "name": "CWE-272: Least Privilege Violation",
                      "link": "https://cwe.mitre.org/data/definitions/272.html"
                    }
                  ],
                  "examples": [
                    {
                      "language": {
                        "name": "C",
                        "highlightAlias": "c"
                      },
                      "preText": "The following code calls chroot() to restrict the application to a subset of the filesystem below APP_HOME in order to prevent an attacker from using the program to gain unauthorized access to files located elsewhere. The code then opens a file specified by the user and processes the contents of the file.",
                      "postText": "Constraining the process inside the application's home directory before opening any files is a valuable security measure. However, the absence of a call to setuid() with some non-zero value means the application is continuing to operate with unnecessary root privileges. Any successful exploit carried out by an attacker against the application can now result in a privilege escalation attack because any malicious operations will be performed with the privileges of the superuser. If the application drops to the privilege level of a non-root user, the potential for damage is substantially reduced.",
                      "code": "chroot(APP_HOME);\nchdir(\"/\");\nFILE* data = fopen(argv[1], \"r+\");\n..."
                    },
                    {
                      "language": {
                        "name": "Markup",
                        "highlightAlias": "markup"
                      },
                      "preText": "This is a test HTML example",
                      "code": "<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t</head>\n\t<body>\n\t</body>\n</html>"
                    }
                  ]
                },
                {
                  "ruleId": "1.5",
                  "title": "Least Privilege Violation",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "The elevated privilege level required to perform operations such as chroot()should be dropped immediately after the operation is performed.When a program calls a privileged function, such as chroot(), it must firstacquire root privilege. As soon as the privileged operation has completed,the program should drop root privilege and return to the privilege level ofthe invoking user.",
                  "mitigation": "There are several ways to mitigate the least privilege violation:Split an individual components into several components, and assignlower privilege levels to those components [8].Identify areas in the system which have that elevated privilege anduse those  components instead to accomplish the task [8].Create a separate environment within the system/program whereonly within that area or environment has an elevated privilege [8].",
                  "references": [
                    {
                      "name": "CWE-272: Least Privilege Violation",
                      "link": "https://cwe.mitre.org/data/definitions/272.html"
                    }
                  ],
                  "examples": [
                    {
                      "language": {
                        "name": "C",
                        "highlightAlias": "c"
                      },
                      "preText": "The following example demonstrates the weakness.",
                      "code": "setuid(0);\n// Do some important stuff \nsetuid(old_uid);\n// Do some non privileged stuff."
                    },
                    {
                      "language": {
                        "name": "Java",
                        "highlightAlias": "java"
                      },
                      "preText": "The following code calls chroot() to restrict the application to a subset of the filesystem below APP_HOME in order to prevent an attacker from using the program to gain unauthorized access to files located elsewhere. The code then opens a file specified by the user and processes the contents of the file.",
                      "postText": "Constraining the process inside the application's home directory before opening any files is a valuable security measure. However, the absence of a call to setuid() with some non-zero value means the application is continuing to operate with unnecessary root privileges. Any successful exploit carried out by an attacker against the application can now result in a privilege escalation attack because any malicious operations will be performed with the privileges of the superuser. If the application drops to the privilege level of a non-root user, the potential for damage is substantially reduced.",
                      "code": "chroot(APP_HOME);\nchdir(\"/\");\nFILE* data = fopen(argv[1], \"r+\");\n..."
                    }
                  ]
                },
                {
                  "ruleId": "8.2",
                  "title": "Insufficient Logging ",
                  "type": "Repudiation",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "When a security-critical event occurs, the softwareeither does not record the event or omits importantdetails about the event when logging it. [62]",
                  "mitigation": "To mitigate this threat, there are 2countermeasures that can be implemented. Firstly,logging should be centralized with different levels ofdetails. However, in a production environmentthere should be sufficient logging to allow systemadministrators to see attacks, diagnose and recoverfrom errors. [62]",
                  "references": [
                    {
                      "name": "CWE-778: Insufficient Logging",
                      "link": "https://cwe.mitre.org/data/definitions/778.html"
                    }
                  ]
                },
                {
                  "ruleId": "10.12",
                  "title": "Insecure Inherited Permissions",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "Low",
                  "description": "A product defines a set of insecure permissions thatare inherited by objects that are created by theprogram [95].",
                  "mitigation": "To mitigate this threat, the settings, managementand handling of privileges need to be managedproperly [95].",
                  "references": [
                    {
                      "name": "CWE-277: Insecure Inherited Permissions",
                      "link": "https://cwe.mitre.org/data/definitions/277.html"
                    }
                  ]
                },
                {
                  "ruleId": "10.4",
                  "title": "Incorrect Privilege Assignment",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "High",
                  "description": "A product incorrectly assigns a privilege to aparticular actor, creating an unintended sphere ofcontrol for that actor [87].",
                  "mitigation": "To mitigate this threat, the settings, managementsand handling of privileges must be managedcarefully. There should be accounts with limitedprivileges if there is a task that needs to be done,with very specific privilege levels. [87]",
                  "references": [
                    {
                      "name": "CWE-266: Incorrect Privilege Assignment",
                      "link": "https://cwe.mitre.org/data/definitions/266.html"
                    }
                  ]
                },
                {
                  "ruleId": "10.13",
                  "title": "Incorrect Execution-Assigned Permissions",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "While it is executing, the software sets thepermissions of an object in a way that violates theintended permissions that have been specified bythe user [96].",
                  "mitigation": "To mitigate this threat, the settings, managementand handling of privileges need to be managedproperly [96].",
                  "references": [
                    {
                      "name": "CWE-279: Incorrect Execution-Assigned Permissions",
                      "link": "https://cwe.mitre.org/data/definitions/279.html"
                    }
                  ]
                },
                {
                  "ruleId": "10.11",
                  "title": "Incorrect Default Permissions",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "The software, upon installation, sets incorrectpermissions for an object that exposes it to anunintended actor [94].",
                  "mitigation": "To mitigate the threat of default permissions thesettings, management and handling of privilegesshould be carefully managed [94].",
                  "references": [
                    {
                      "name": "CWE-276: Incorrect Default Permissions",
                      "link": "https://cwe.mitre.org/data/definitions/276.html"
                    }
                  ]
                },
                {
                  "ruleId": "10.15",
                  "title": "Improper Ownership Management",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "The software assigns the wrong ownership, or doesnot properly verify the ownership, of an object orresource [98].",
                  "mitigation": "To mitigate this threat, the settings, managementand handling of privilege needs to managedcarefully [98].",
                  "references": [
                    {
                      "name": "CWE-282: Improper Ownership Management ",
                      "link": "https://cwe.mitre.org/data/definitions/282.html"
                    }
                  ]
                },
                {
                  "ruleId": "10.14",
                  "title": "Improper Handling of Insufficient Permissions orPrivileges",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "The application does not handle or incorrectlyhandles when it has insufficient privileges to accessresources or functionality as specified by theirpermissions. This may cause it to follow unexpectedcode paths that may leave the application in aninvalid state [97].",
                  "mitigation": "To mitigate this threat, there should be areas wherethere are specific permission levels. In addition,verify that if an access to a resource or systemfunctionality is successful or not in all privilegelevels. [97]",
                  "references": [
                    {
                      "name": "CWE-280: Improper Handling of Insufficient Permissions or Privileges",
                      "link": "https://cwe.mitre.org/data/definitions/280.html"
                    }
                  ]
                },
                {
                  "ruleId": "10.10",
                  "title": "Improper Check for Dropped Privileges",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "The software attempts to drop privileges but doesnot check or incorrectly checks to see if the dropsucceeded [93].",
                  "mitigation": "To mitigate this threat, there are two techniquesthat can counter against an improper check fordropped privileges. Firstly, the system should bedesigned from the point of view of privilege level,where there are entry points and trust boundariesto interface components of different privilegelevels. Ensure that all functions return a value, andverify that the result is expected [93].",
                  "references": [
                    {
                      "name": "CWE-273: Improper Check for Dropped Privileges",
                      "link": "https://cwe.mitre.org/data/definitions/273.html"
                    }
                  ]
                },
                {
                  "ruleId": "0.2",
                  "title": "Compliance in the Collection and Storage of Electronic Health Records",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "High",
                  "description": "Depending on the nation and region of subject data collection and storage(local or remote), specific operating rules may apply.For example: In the storage of electronic health records in Canada, specificrules and legislation are put into place varying by province/territory andcontinuously change over time. The legislation is written through discussionof principles of consent to collection, limited use, security safeguards, andpatient participation.",
                  "mitigation": "Legal council is required when defining User Agreements and whenengineering specific rules of collection or storage to ensure all definedstandards and criterion are met for the region(s) of operation.",
                  "references": []
                }
              ],
              "attrs": {
                "text": {
                  "ref-y": 90,
                  "text": "Pacemaker 22"
                },
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Laptop",
              "size": {
                "width": 80,
                "height": 80
              },
              "position": {
                "x": 1000,
                "y": 74
              },
              "angle": 0,
              "id": "a42cb977-ef92-4cce-99cb-f8c748db55d7",
              "z": 24,
              "hasOpenThreats": false,
              "isEncryptedLaptop": false,
              "programmingLanguageLaptop": false,
              "isALogLaptop": true,
              "storesCredentialsLaptop": true,
              "threats": [
                {
                  "status": "Mitigated",
                  "severity": "Medium",
                  "title": "Test title",
                  "type": [
                    "Spoofing"
                  ]
                }
              ],
              "attrs": {
                "text": {
                  "ref-y": 90,
                  "text": "Laptop 23"
                },
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Actor",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 32,
                "y": 270
              },
              "angle": 0,
              "id": "0fc828a5-7f57-4991-9241-72eb96e8179c",
              "z": 25,
              "hasOpenThreats": false,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                "text": {
                  "text": "actor 24"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            }
          ]
        },
        "size": {
          "height": 590,
          "width": 790
        }
      }
    ]
  }
}