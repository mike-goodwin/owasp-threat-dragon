{
  "summary": {
    "title": "Test"
  },
  "detail": {
    "contributors": [],
    "diagrams": [
      {
        "title": "nnn",
        "thumbnail": "./public/content/images/thumbnail.jpg",
        "id": 0,
        "diagramJson": {
          "cells": [
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 50,
                "y": 50
              },
              "angle": 0,
              "id": "5a9c7b39-9132-4abb-8d87-564f8ded0a1c",
              "z": 1,
              "hasOpenThreats": true,
              "threats": [
                {
                  "ruleId": "b2a6d40d-d3f8-4750-8e4d-c02cc84b13dc",
                  "title": "Generic spoofing threat",
                  "type": "Spoofing",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "A generic spoofing threat"
                },
                {
                  "ruleId": "4adaa48a-0345-4533-a189-64c98c4420dd",
                  "title": "Generic tampering threat",
                  "type": "Tampering",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "A generic tampering threat"
                },
                {
                  "ruleId": "87bc37e2-798e-4d68-bb96-feb1da26da48",
                  "title": "Generic repudiation threat",
                  "type": "Repudiation",
                  "status": "Open",
                  "severity": "Low",
                  "description": "A generic repudiation threat"
                },
                {
                  "ruleId": "13000296-b17d-4b72-9cc4-f5cc33f80e4c",
                  "title": "Generic information disclosure threat",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "A generic information disclosure threat"
                },
                {
                  "ruleId": "edb05d76-a695-455f-947b-7d67b78bc31d",
                  "title": "Generic DoS threat",
                  "type": "Denial of service",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "A generic DoS threat"
                },
                {
                  "ruleId": "c1377855-ea20-4c97-8861-f95c364fb8d2",
                  "title": "Generic elevation threat",
                  "type": "Elevation of privilege",
                  "status": "Mitigated",
                  "severity": "Medium",
                  "description": "A generic elevation threat"
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "process 0"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 276,
                "y": 56
              },
              "angle": 0,
              "id": "a679a17a-a631-4cae-a5ad-c88c310a3769",
              "z": 2,
              "hasOpenThreats": true,
              "threats": [
                {
                  "ruleId": "b2a6d40d-d3f8-4750-8e4d-c02cc84b13dc",
                  "title": "Generic spoofing threat",
                  "type": "Spoofing",
                  "status": "Open",
                  "severity": "Low",
                  "description": "A generic spoofing threat 2"
                },
                {
                  "ruleId": "4adaa48a-0345-4533-a189-64c98c4420dd",
                  "title": "Generic tampering threat",
                  "type": "Tampering",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "A generic tampering threat"
                },
                {
                  "ruleId": "87bc37e2-798e-4d68-bb96-feb1da26da48",
                  "title": "Generic repudiation threat",
                  "type": "Repudiation",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "A generic repudiation threat"
                },
                {
                  "ruleId": "13000296-b17d-4b72-9cc4-f5cc33f80e4c",
                  "title": "Generic information disclosure threat",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "A generic information disclosure threat"
                },
                {
                  "ruleId": "edb05d76-a695-455f-947b-7d67b78bc31d",
                  "title": "Generic DoS threat",
                  "type": "Denial of service",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "A generic DoS threat"
                },
                {
                  "ruleId": "c1377855-ea20-4c97-8861-f95c364fb8d2",
                  "title": "Generic elevation threat",
                  "type": "Elevation of privilege",
                  "status": "Mitigated",
                  "severity": "High",
                  "description": "A generic elevation threat",
                  "mitigation": "Test mitigation"
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "Test Title",
                  "type": "Tampering",
                  "description": "Test Description",
                  "mitigation": "Test Mitigation"
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "process 1"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "5a9c7b39-9132-4abb-8d87-564f8ded0a1c"
              },
              "target": {
                "id": "a679a17a-a631-4cae-a5ad-c88c310a3769"
              },
              "vertices": [
                {
                  "x": 246,
                  "y": 105
                }
              ],
              "id": "92cd59d1-1510-4bd7-a965-58576b9ade00",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "flow 2",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 3,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Actor",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 18,
                "y": 252
              },
              "angle": 0,
              "id": "69fdc002-85d9-4b65-b0c2-89fe10acc4ac",
              "z": 4,
              "hasOpenThreats": false,
              "threats": [
                {
                  "ruleId": "1.6",
                  "title": "Code Permission",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "High",
                  "description": "An active developer with access to unrelated module code may tamper or disclose sensitive project information (Interproject Code Access).",
                  "mitigation": "Throughout the development lifecycle, there are several mitigations that can be used:Within the Implementation phase, if a critical resource is being used, there should be a check to see if a resource has permissions/behavior which are not secure (such as a regular user being able to modify that resource).  If there are such behaviors or permissions that exist, the program should create an error or exit the program [10]. Within the Architecture and Design phase, one should split up the software components based on privilege level and if possible, control what data, functions and resources each component uses based the privilege level [10].  Another option in this phase is to create a separate environment within the system/program where only within that area or environment has an elevated privilege [8]. In the installation phase, default or most restrictive permissions should be set to avoid any code which doesn\\t have the permissions to be run.  Also, the assumption that a system administrator will change the settings based on a manual is incorrect [10]. In the System Configuration phase, The configurable, executable files and libraries should be only have read and write access by the system administrator [10]. In the Documentation phase, within any documentation, any configurations that are suggested must be secure, and do not affect the operation of the computer or program [10]. Code Quality"
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                "text": {
                  "text": "actor 3"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "69fdc002-85d9-4b65-b0c2-89fe10acc4ac"
              },
              "target": {
                "id": "5a9c7b39-9132-4abb-8d87-564f8ded0a1c"
              },
              "vertices": [
                {
                  "x": 39,
                  "y": 194
                }
              ],
              "id": "0599592d-81ed-4457-af13-5ca595a51e99",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "flow 4",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 5,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Actor",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 240,
                "y": 236
              },
              "angle": 0,
              "id": "3069702c-336a-4378-a62c-fca72a2bcb97",
              "z": 6,
              "hasOpenThreats": false,
              "threats": [
                {
                  "ruleId": "1.6",
                  "title": "Code Permission",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "High",
                  "description": "An active developer with access to unrelated module code may tamper or disclose sensitive project information (Interproject Code Access).",
                  "mitigation": "Throughout the development lifecycle, there are several mitigations that can be used:Within the Implementation phase, if a critical resource is being used, there should be a check to see if a resource has permissions/behavior which are not secure (such as a regular user being able to modify that resource).  If there are such behaviors or permissions that exist, the program should create an error or exit the program [10]. Within the Architecture and Design phase, one should split up the software components based on privilege level and if possible, control what data, functions and resources each component uses based the privilege level [10].  Another option in this phase is to create a separate environment within the system/program where only within that area or environment has an elevated privilege [8]. In the installation phase, default or most restrictive permissions should be set to avoid any code which doesn\\t have the permissions to be run.  Also, the assumption that a system administrator will change the settings based on a manual is incorrect [10]. In the System Configuration phase, The configurable, executable files and libraries should be only have read and write access by the system administrator [10]. In the Documentation phase, within any documentation, any configurations that are suggested must be secure, and do not affect the operation of the computer or program [10]. Code Quality"
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasNoOpenThreats isInScope"
                },
                "text": {
                  "text": "actor 5"
                },
                ".element-text": {
                  "class": "element-text hasNoOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "3069702c-336a-4378-a62c-fca72a2bcb97"
              },
              "target": {
                "id": "a679a17a-a631-4cae-a5ad-c88c310a3769"
              },
              "vertices": [],
              "id": "1bae9d49-27d4-4c50-9f72-0901e0150564",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "flow 8",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 9,
              "hasOpenThreats": false,
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isInScope"
                }
              }
            }
          ]
        },
        "size": {
          "height": 590,
          "width": 790
        }
      },
      {
        "title": "bbb",
        "thumbnail": "./public/content/images/thumbnail.jpg",
        "id": 1,
        "diagramJson": {
          "cells": [
            {
              "type": "tm.Actor",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 50,
                "y": 50
              },
              "angle": 0,
              "id": "0bb2ef48-5f32-4961-8136-9560e5d209f0",
              "z": 1,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Low",
                  "title": "Test Title",
                  "type": "Spoofing",
                  "description": "Test Description Edited Again",
                  "mitigation": "Test Mitigation"
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Browser"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 256,
                "y": 171
              },
              "angle": 0,
              "id": "255893f4-89e0-4e62-be74-acb98054d4bd",
              "z": 2,
              "hasOpenThreats": true,
              "threats": [
                {
                  "ruleId": "1.5",
                  "title": "Least Privilege Violation",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.When a program calls a privileged function, such as chroot(), it must first acquire root privilege. As soon as the privileged operation has completed, the program should drop root privilege and return to the privilege level of the invoking user.",
                  "mitigation": "There are several ways to mitigate the least privilege violation:Split an individual components into several components, and assign lower privilege levels to those components [8]. Identify areas in the system which have that elevated privilege and use those  components instead to accomplish the task [8]. Create a separate environment within the system/program where only within that area or environment has an elevated privilege [8]. "
                },
                {
                  "ruleId": "2.1",
                  "title": "Double Free Error",
                  "type": "Tampering",
                  "status": "Open",
                  "severity": "High",
                  "description": "Double free errors occur when free() is called more than once with the same memory address as an argument.Calling free() twice on the same value can lead to memory leak. When a program calls free() twice with the same argument, the program's memory management data structures become corrupted and could allow a malicious user to write values in arbitrary memory spaces. This corruption can cause the program to crash or, in some circumstances, alter the execution flow. By overwriting registers or memory spaces, an attacker can trick the program into executing code of his/her own choosing, often resulting in an interactive shell with elevated permissions.When a buffer is free(), a linked list of free buffers is read to rearrange and combine the chunks of free memory (to be able to allocate larger buffers in the future). These chunks are laid out in a double linked list which points to previous and next chunks. Unlinking an unused buffer (which is what happens when free() is called) could allow an attacker to write arbitrary values in memory; essentially overwriting valuable registers, calling shellcode from its own buffer.",
                  "mitigation": "To mitigate this threat, each allocation should only be freed once.  Once the memory has been allocated, the pointer should be set to NULL to ensure the pointer cannot be freed again.  In complicated error conditions, ensure that clean-up routines represent the state of allocation.  If the language is object oriented, that object destructors delete each allocation of memory one time only [11]. "
                },
                {
                  "ruleId": "2.2",
                  "title": "Leftover Debug Code",
                  "type": "Tampering",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "Debug code can create unintended entry points in a deployed web application.A common development practice is to add \"back door\" code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the application. When this sort of debug code is accidentally left in the application, the application is open to unintended modes of interaction. These back-door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the application.",
                  "mitigation": "To mitigate this threat, all debug code should be removed prior to delivery of code [12]. "
                },
                {
                  "ruleId": "2.3",
                  "title": "Memory Leak",
                  "type": "Denial of service",
                  "status": "Open",
                  "severity": "High",
                  "description": "A memory leak is an unintentional form of memory consumption whereby the developer fails to free an allocated block of memory when no longer needed. The consequences of such an issue depend on the application itself. Consider the following general three cases:Short Lived User-land Application: Little if any noticeable effect. Modern operating system recollects lost memory after program termination.Long Lived User-land Application: Potentially dangerous. These applications continue to waste memory over time, eventually consuming all RAM resources. Leads to abnormal system behavior.Kernel-land Process: Memory leaks in the kernel level lead to serious system stability issues. Kernel memory is very limited compared to user land memory and should be handled cautiously.Memory is allocated but never freed. Memory leaks have two common and sometimes overlapping causes:Error conditions and other exceptional circumstances.Confusion over which part of the program is responsible for freeing the memory.Most memory leaks result in general software reliability problems, but if an attacker can intentionally trigger a memory leak, the attacker might be able to launch a denial of service attack (by crashing the program) or take advantage of other unexpected program behavior resulting from a low memory condition.",
                  "mitigation": "To mitigate that threat, 3rd party tools/software are required to see if this vulnerability exists in the code.  One such tool that can be used in a Unix/Linux environment is a program called Valgrind.  This program will run the desired software program to be checked to check all memory allocation and de-allocation methods are working as intended.  [13]"
                },
                {
                  "ruleId": "2.4",
                  "title": "Null Dereference",
                  "type": "Denial of service",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "The program can potentially dereference a null pointer, thereby raising a NullPointerException. Null pointer errors are usually the result of one or more programmer assumptions being violated. Most null pointer issues result in general software reliability problems, but if an attacker can intentionally trigger a null pointer dereference, the attacker might be able to use the resulting exception to bypass security logic or to cause the application to reveal debugging information that will be valuable in planning subsequent attacks.A null-pointer dereference takes place when a pointer with a value of NULL is used as though it pointed to a valid memory area.Null-pointer dereferences, while common, can generally be found and corrected in a simple way. They will always result in the crash of the process, unless exception handling (on some platforms) is invoked, and even then, little can be done to salvage the process.",
                  "mitigation": "To mitigate this threat, if possible, this vulnerability would be prevented, if the programming language that was used to program the software did not use pointers.  Another mitigation suggestion is to check to see if the pointers are referenced correctly prior to their use [14]. "
                },
                {
                  "ruleId": "2.6",
                  "title": "Portability",
                  "type": "Tampering",
                  "status": "Open",
                  "severity": "Low",
                  "description": "Functions with inconsistent implementations across operating systems and operating system versions cause portability problems.The behavior of functions in this category varies by operating system, and at times, even by operating system version. Implementation differences can include:Slight differences in the way parameters are interpreted, leading to inconsistent results.Some implementations of the function carry significant security risks.The function might not be defined on all platforms.",
                  "mitigation": "N/A"
                },
                {
                  "ruleId": "2.9",
                  "title": "Use of Obsolete Methods",
                  "type": "Denial of service",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "The use of deprecated or obsolete functions may indicate neglected code.As programming languages evolve, functions occasionally become obsolete due to:Advances in the languageImproved understanding of how operations should be performed effectively and securelyChanges in the conventions that govern certain operationsFunctions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.Refer to the documentation for this function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality. The remainder of this text discusses general problems that stem from the use of deprecated or obsolete functions.",
                  "mitigation": "To mitigate this threat, the documentation for the program should be referred to, to determine the reason it is deprecated and to determine alternatives to using those methods, which may pose not only a function concern, but also a security concern.  [26]Cryptography"
                },
                {
                  "ruleId": "3.1",
                  "title": "Sensitive Parameters in URL",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "Information exposure through query strings in URL is when sensitive data is passed to parameters in the URL. This allows attackers to obtain sensitive data such as usernames, passwords, tokens (authX), database details, and any other potentially sensitive data. Simply using HTTPS does not resolve this vulnerability. A very common example is in GET requests.",
                  "mitigation": "To mitigate this threat, it is recommended to use a POST method, as those parameters that are passed in through the URL are not saved, and therefore cannot be exposed.  [28]"
                },
                {
                  "ruleId": "2.7",
                  "title": "Undefined Behavior",
                  "type": "Tampering",
                  "status": "Open",
                  "severity": "Low",
                  "description": "The behavior of this function is undefined unless its control parameter is set to a specific value. The Linux Standard Base Specification 2.0.1 for libc places constraints on the arguments to some internal functions.",
                  "mitigation": "N/A"
                },
                {
                  "ruleId": "2.8",
                  "title": "Unreleased Resource",
                  "type": "Denial of service",
                  "status": "Open",
                  "severity": "Medium",
                  "description": "Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, the attacker might be able to launch a denial of service attack by depleting the resource pool.Resource leaks have at least two common causes:Error conditions and other exceptional circumstances.Confusion over which part of the program is responsible for releasing the resource.",
                  "mitigation": "To mitigate this threat, the programming language used to program the desired program, should not allow this threat to occur.  Another suggestion is to free all resources that have been allocated and be consistent in terms of how memory is allocated and de-allocated.  To furthermore mitigate this threat, is to release all the member components of a given object [27]. "
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Web\nApplication"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Store",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 27,
                "y": 423
              },
              "angle": 0,
              "id": "50dc4c8d-6b4a-41fb-b99a-159e11a255bd",
              "z": 3,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "title": "Credentials should be encrypted",
                  "type": "Information disclosure",
                  "description": "The Web Application Config stores credentials used by the Web App to access the message queue. These could be stolen by an attacker and used to read confidential data or place poison message on the queue.",
                  "mitigation": "The Message Queue should be encrypted."
                }
              ],
              "storesCredentials": true,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Web Application Config"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Store",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 351,
                "y": 429
              },
              "angle": 0,
              "id": "11d325c8-b5b7-4ddd-80f2-07c50e9ee901",
              "z": 4,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "Unauthorized access",
                  "type": "Information disclosure",
                  "description": "An attacker could make a query call on the DB",
                  "mitigation": "Require all queries to be authenticated."
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "Credential theft",
                  "type": "Information disclosure",
                  "description": "An attacker could obtain the DB credentials and use them to make unauthorized queries.",
                  "mitigation": "Use a firewall to restrict access to the DB to only the Background Worker IP address."
                }
              ],
              "isALog": true,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Database"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Store",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 705,
                "y": 429
              },
              "angle": 0,
              "id": "bf482dd6-4dc7-4ae4-89f7-9233969fb177",
              "z": 5,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "Accessing DB credentials",
                  "type": "Information disclosure",
                  "description": "The Background Worker configuration stores the credentials used by the worker to access the DB. An attacker could compromise the Background Worker and get access to the DB credentials.",
                  "mitigation": "Encrypt the DB credentials in the configuration file.\n\nExpire and replace the DB credentials regularly."
                }
              ],
              "storesCredentials": true,
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Worker Config"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Process",
              "size": {
                "width": 100,
                "height": 100
              },
              "position": {
                "x": 709,
                "y": 175
              },
              "angle": 0,
              "id": "50a179fa-407d-4a00-b775-e67ec4fd48e7",
              "z": 6,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "Poison messages",
                  "type": "Denial of service",
                  "description": "An attacker could generate a malicious message that the Background Worker cannot process.",
                  "mitigation": "Validate the content of all messages, before processing. Reject any message that have invalid content and log the rejection. Do not log the malicious content - instead, log a description of the error."
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Background\nWorker"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "50a179fa-407d-4a00-b775-e67ec4fd48e7"
              },
              "target": {
                "id": "11d325c8-b5b7-4ddd-80f2-07c50e9ee901"
              },
              "vertices": [
                {
                  "x": 666,
                  "y": 381
                }
              ],
              "id": "cde56adf-7534-4287-a4dc-7af087e3be77",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "Worker Queries",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 7,
              "hasOpenThreats": true,
              "isEncrypted": true,
              "threats": [
                {
                  "ruleId": "6.4",
                  "title": "Improper Input Validation",
                  "type": "Tampering",
                  "status": "Open",
                  "severity": "High",
                  "description": "The product does not validate or incorrectly validates input that can affect the control flow or data flow of a program. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.[25]",
                  "mitigation": "Use an input validation framework such as Struts or the OWASP ESAPI Validation API.  If you use Struts, be mindful of Struts Validation ProblemsUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application.  Remember that such inputs may be obtained indirectly through API calls. Assume all input is malicious.  Use an \"accept known good\" input validation strategy, i. e. , use a whitelist of acceptable inputs that strictly conform to specifications.  Reject any input that does not strictly conform to specifications or transform it into something that does.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules.  As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue. \" Do not rely exclusively on looking for malicious or malformed inputs (i. e. , do not rely on a blacklist).  A blacklist is likely to miss at least one undesirable input, especially if the code\\s environment changes.  This can give attackers enough room to bypass the intended validation.  However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid client-side enforcement of server-side securityAttackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely.  Then, these modified values would be submitted to the server. Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session[25]"
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "11d325c8-b5b7-4ddd-80f2-07c50e9ee901"
              },
              "target": {
                "id": "50a179fa-407d-4a00-b775-e67ec4fd48e7"
              },
              "vertices": [
                {
                  "x": 590,
                  "y": 353
                }
              ],
              "id": "ad103c08-6db1-4994-aa31-2af10b7eab8b",
              "labels": [
                {
                  "position": {
                    "distance": 0.5693911339151382,
                    "offset": -3.777376836165786
                  },
                  "attrs": {
                    "text": {
                      "text": "Worker Query Results",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 8,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Low",
                  "title": "Man in the middle attack",
                  "type": "Information disclosure",
                  "description": "An attacker could intercept the DB queries in transit and obtain sensitive information, such as DB credentials, query parameters or query results (is unlikely since the data flow is over a private network).",
                  "mitigation": "Enforce an encrypted connection at the DB server"
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "11d325c8-b5b7-4ddd-80f2-07c50e9ee901"
              },
              "target": {
                "id": "255893f4-89e0-4e62-be74-acb98054d4bd"
              },
              "vertices": [
                {
                  "x": 438,
                  "y": 265
                }
              ],
              "id": "05b625e7-e1ad-42bb-ade0-a2bd1a4734e5",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "Web App Query\nResults",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 9,
              "hasOpenThreats": true,
              "isEncrypted": true,
              "threats": [
                {
                  "ruleId": "8.9",
                  "title": "Broken/Insecure Cryptography",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "High",
                  "description": "This threat is cause when an adversary has physical access to data that has been encrypted improperly, or mobile malware acting on an adversary's behalf. This can be done in several ways such as decryption access to the device or network traffic capture, or malicious apps on the device with access to the encrypted data Hello.",
                  "mitigation": "To mitigate this threat, avoid using algorithms or protocols that are unsecure such as RC2, MD4, MD5 and SHA1.  A stronger cryptographic algorithm that is widely known to be secure should be used.  Currently, AES is one of the most secure encryption algorithms and is recommended to be used.   [33] [34] [52]"
                },
                {
                  "ruleId": "8.16",
                  "title": "Improper Session Handling",
                  "type": "Spoofing",
                  "status": "Open",
                  "severity": "High",
                  "description": "Anyone or any mobile app with access to HTTP/S traffic, cookie data, etc.  Possible attack vectors include physical access to the device, and network traffic capture, or malware on the mobile device. Essentially an adversary that has access to the session tokens can impersonate the user by submitting the token to the backend server for any sensitive transactions such as credit card payments or health information like EKG results sent to a doctor. [59]",
                  "mitigation": "Validate sessions on the backend by ensuring all session invalidation events are executed on the server side and not just on the mobile app. Add adequate timeout protection to prevent the malicious potential for an unauthorized user to gain access to an existing session and assume the role of that user.  Timeout periods vary accordingly based on the application, but some good guidelines are: 15 minutes for high security apps, 30 minutes for medium security apps, and 1 hour for low security apps. Properly reset cookies during authentication state changes, by destroying sessions on the server side and making sure that the cookies presented as a part of the previous sessions are no longer acceptedIn addition to properly invalidating tokens on the server side during key application events, make sure tokens are generated properly by using well-established and industry standard methods of creating tokens.  Visit the following websites for more details: https://www. pcisecuritystandards. org/documents/Tokenization_Product_Security_Guidelines. pdf and https://tools. ietf. org/html/rfc7519 for JSON Web Token (JWT) and https://www. ietf. org/rfc/rfc6750. txt for Bearer Token Usage[59]"
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "255893f4-89e0-4e62-be74-acb98054d4bd"
              },
              "target": {
                "id": "11d325c8-b5b7-4ddd-80f2-07c50e9ee901"
              },
              "vertices": [
                {
                  "x": 365,
                  "y": 321
                }
              ],
              "id": "f382830f-3258-402d-85fa-ed179bd265f2",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "Queries",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 10,
              "hasOpenThreats": true,
              "isEncrypted": true,
              "threats": [
                {
                  "ruleId": "6.2",
                  "title": "Expression Language Injection",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "High",
                  "description": "Server-side code injection vulnerabilities arise when an application incorporates user-controllable data into a string that is dynamically evaluated by a code interpreter. If the user data is not strictly validated, an attacker can use crafted input to modify the code to be executed and inject arbitrary code that will be executed by the server. Server-side code injection vulnerabilities are usually very serious and lead to complete compromise of the application's data and functionality, and often of the server that is hosting the application. It may also be possible to use the server as a platform for further attacks against other systems.[23]",
                  "mitigation": "Whenever possible, applications should avoid incorporating user-controllable data into dynamically evaluated code.  In almost every situation, there are safer alternative methods of implementing application functions, which cannot be manipulated to inject arbitrary code into the server\\s processing. If it is considered unavoidable to incorporate user-supplied data into dynamically evaluated code, then the data should be strictly validated.  Ideally, a whitelist of specific accepted values should be used.  Otherwise, only short alphanumeric strings should be accepted.  Input containing any other data, including any conceivable code metacharacters, should be rejected. [23]"
                },
                {
                  "ruleId": "6.4",
                  "title": "Improper Input Validation",
                  "type": "Tampering",
                  "status": "Open",
                  "severity": "High",
                  "description": "The product does not validate or incorrectly validates input that can affect the control flow or data flow of a program. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.[25]",
                  "mitigation": "Use an input validation framework such as Struts or the OWASP ESAPI Validation API.  If you use Struts, be mindful of Struts Validation ProblemsUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application.  Remember that such inputs may be obtained indirectly through API calls. Assume all input is malicious.  Use an \"accept known good\" input validation strategy, i. e. , use a whitelist of acceptable inputs that strictly conform to specifications.  Reject any input that does not strictly conform to specifications or transform it into something that does.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules.  As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue. \" Do not rely exclusively on looking for malicious or malformed inputs (i. e. , do not rely on a blacklist).  A blacklist is likely to miss at least one undesirable input, especially if the code\\s environment changes.  This can give attackers enough room to bypass the intended validation.  However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid client-side enforcement of server-side securityAttackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely.  Then, these modified values would be submitted to the server. Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session[25]"
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "50dc4c8d-6b4a-41fb-b99a-159e11a255bd"
              },
              "target": {
                "id": "255893f4-89e0-4e62-be74-acb98054d4bd"
              },
              "vertices": [
                {
                  "x": 178,
                  "y": 271
                }
              ],
              "id": "dde8ccfc-1fff-4a6f-830c-d758cfc6b51d",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "Read web app config",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 11,
              "hasOpenThreats": false,
              "outOfScope": true,
              "reasonOutOfScope": "The data flow represents a read from the file system",
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isOutOfScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "bf482dd6-4dc7-4ae4-89f7-9233969fb177"
              },
              "target": {
                "id": "50a179fa-407d-4a00-b775-e67ec4fd48e7"
              },
              "vertices": [
                {
                  "x": 846,
                  "y": 333
                }
              ],
              "id": "e82c6701-190c-46ad-81cd-be8bdc699d42",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "Read worker config",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 12,
              "hasOpenThreats": false,
              "outOfScope": true,
              "reasonOutOfScope": "The data flow represents a read from the file system",
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasNoOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasNoOpenThreats isOutOfScope"
                }
              }
            },
            {
              "type": "tm.Store",
              "size": {
                "width": 160,
                "height": 80
              },
              "position": {
                "x": 676,
                "y": 20
              },
              "angle": 0,
              "id": "ae2338b6-9abf-42ab-aca5-9bf209a12e57",
              "z": 13,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "Low",
                  "title": "Message Secrecy",
                  "type": "Information disclosure",
                  "description": "The data flow between the Web Application and the Background Worker is not point-to-point and therefore end-to-end secrecy cannot be provided at the transport layer. Messages could be read by an attacker at rest in the Message Queue.",
                  "mitigation": "Use message level encryption for high sensitivity data (e.g. security tokens) in messages."
                },
                {
                  "status": "Open",
                  "severity": "Medium",
                  "title": "Message tampering",
                  "type": "Tampering",
                  "description": "Messages on the queue could be tampered with, causing incorrect processing by the Background Worker",
                  "mitigation": "Sign all queue messages at the Web Server. Validate the message signature at the Background Worker and reject any message with a missing or invalid signature. Log any failed messages."
                },
                {
                  "status": "Open",
                  "severity": "High",
                  "title": "Fake messages in queue",
                  "type": "Spoofing",
                  "description": "An attacker could put a fake message on the queue, causing the Background Worker to do incorrect processing.",
                  "mitigation": "Restrict access to the queue to the IP address of the Web Server and Background Worker.\n\nImplement authentication on the queue endpoint."
                }
              ],
              "attrs": {
                ".element-shape": {
                  "class": "element-shape hasOpenThreats isInScope"
                },
                "text": {
                  "text": "Message Queue"
                },
                ".element-text": {
                  "class": "element-text hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "0bb2ef48-5f32-4961-8136-9560e5d209f0"
              },
              "target": {
                "id": "255893f4-89e0-4e62-be74-acb98054d4bd"
              },
              "vertices": [
                {
                  "x": 246,
                  "y": 84
                }
              ],
              "id": "2d90423b-1fa9-4060-9ecc-01c5509a1640",
              "labels": [
                {
                  "position": {
                    "distance": 0.6787019286367256,
                    "offset": 5.397182970773429
                  },
                  "attrs": {
                    "text": {
                      "text": "Web Request",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 14,
              "hasOpenThreats": true,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "threats": [
                {
                  "ruleId": "3.6",
                  "title": "Hard-coded Cryptographic Key",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "High",
                  "description": "The use of a hard-coded cryptographic key tremendously increases the possibility that encrypted data may be recovered.Authentication: If hard-coded cryptographic keys are used, it is almost certain that malicious users will gain access through the account in question.",
                  "mitigation": "To mitigate against this threat, this practice of hard coding the cryptographic key should be avoided to avoid exposing the cryptographic key to a potential adversary for exploitation [32]"
                },
                {
                  "ruleId": "3.7",
                  "title": "Faulty Cryptographic Algorithm",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "High",
                  "description": "Attempting to create non-standard and non-tested algorithms, using weak algorithms, or applying algorithms incorrectly will pose a high weakness to data that is meant to be secure.",
                  "mitigation": "To mitigate this threat, a stronger cryptographic algorithm that is widely known to be secure should be used.  Currently, AES is one of the most secure encryption algorithms and is recommended to be used.   [33] [34]Environment (Platform Vulnerabilities)"
                },
                {
                  "ruleId": "4.2",
                  "title": "Insecure Transport",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "High",
                  "description": "The application configuration should ensure that SSL is used for all access-controlled pages.If an application uses SSL to guarantee confidential communication with client browsers, the application configuration should make it impossible to view any access-controlled page without SSL. However, it is not an uncommon problem that the configuration of the application fails to enforce the use of SSL on pages that contain sensitive data.There are three common ways for SSL to be bypassed:A user manually enters the URL and types \"HTTP\" rather than \"HTTPS\".Attackers intentionally send a user to an insecure URL.A programmer erroneously creates a relative link to a page in the application, failing to switch from HTTP to HTTPS. (This is particularly easy to do when the link moves between public and secured areas on a web site.)",
                  "mitigation": "The first and foremost control that needs to be applied is to check for a lack of transport encryption.  This can be done by:Reviewing network traffic of the device, its mobile application and any cloud connections to determine if any information is passed in clear textReviewing the use of SSL or TLS to ensure it is up to date and properly implementedReviewing the use of any encryption protocols to ensure they are recommended and acceptedIn order to ensure enough transport encryption:Ensuring data is encrypted using protocols such as SSL and TLS while transiting networks. Ensuring other industry standard encryption techniques are utilized to protect data during transport if SSL or TLS are not available. Ensuring only accepted encryption standards are used and avoid using proprietary encryption protocols. Ensuring the message payload encryptionEnsuring the secure encryption key handshaking. Ensuring received data integrity verification. [4]"
                },
                {
                  "ruleId": "4.3",
                  "title": "Insufficient Session-ID Length",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "High",
                  "description": "Session identifiers should be at least 128 bits long to prevent brute-force session guessing attacks. A shorter session identifier leaves the application open to brute-force session guessing attacks. If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking).  [7]",
                  "mitigation": "Session identifiers should be at least 128 bits long to prevent brute-force session guessing.  Assume a 128-bit session identifier that provides 64 bits of entropy.  With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed.  Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years. A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment.  However, any users that abandon their sessions without logging out will increase this number.  (This is one of many good reasons to have a short inactive session timeout. )[7]"
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "255893f4-89e0-4e62-be74-acb98054d4bd"
              },
              "target": {
                "id": "0bb2ef48-5f32-4961-8136-9560e5d209f0"
              },
              "vertices": [
                {
                  "x": 114,
                  "y": 188
                }
              ],
              "id": "06e4e999-3e29-4faa-ba0b-439fcde24517",
              "labels": [
                {
                  "position": {
                    "distance": 0.8275584014287158,
                    "offset": -27.26677341578761
                  },
                  "attrs": {
                    "text": {
                      "text": "Web Response",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 15,
              "hasOpenThreats": true,
              "isEncrypted": true,
              "isPublicNetwork": true,
              "threats": [
                {
                  "ruleId": "3.6",
                  "title": "Hard-coded Cryptographic Key",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "High",
                  "description": "The use of a hard-coded cryptographic key tremendously increases the possibility that encrypted data may be recovered.Authentication: If hard-coded cryptographic keys are used, it is almost certain that malicious users will gain access through the account in question.",
                  "mitigation": "To mitigate against this threat, this practice of hard coding the cryptographic key should be avoided to avoid exposing the cryptographic key to a potential adversary for exploitation [32]"
                },
                {
                  "ruleId": "3.7",
                  "title": "Faulty Cryptographic Algorithm",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "High",
                  "description": "Attempting to create non-standard and non-tested algorithms, using weak algorithms, or applying algorithms incorrectly will pose a high weakness to data that is meant to be secure.",
                  "mitigation": "To mitigate this threat, a stronger cryptographic algorithm that is widely known to be secure should be used.  Currently, AES is one of the most secure encryption algorithms and is recommended to be used.   [33] [34]Environment (Platform Vulnerabilities)"
                },
                {
                  "ruleId": "4.2",
                  "title": "Insecure Transport",
                  "type": "Information disclosure",
                  "status": "Open",
                  "severity": "High",
                  "description": "The application configuration should ensure that SSL is used for all access-controlled pages.If an application uses SSL to guarantee confidential communication with client browsers, the application configuration should make it impossible to view any access-controlled page without SSL. However, it is not an uncommon problem that the configuration of the application fails to enforce the use of SSL on pages that contain sensitive data.There are three common ways for SSL to be bypassed:A user manually enters the URL and types \"HTTP\" rather than \"HTTPS\".Attackers intentionally send a user to an insecure URL.A programmer erroneously creates a relative link to a page in the application, failing to switch from HTTP to HTTPS. (This is particularly easy to do when the link moves between public and secured areas on a web site.)",
                  "mitigation": "The first and foremost control that needs to be applied is to check for a lack of transport encryption.  This can be done by:Reviewing network traffic of the device, its mobile application and any cloud connections to determine if any information is passed in clear textReviewing the use of SSL or TLS to ensure it is up to date and properly implementedReviewing the use of any encryption protocols to ensure they are recommended and acceptedIn order to ensure enough transport encryption:Ensuring data is encrypted using protocols such as SSL and TLS while transiting networks. Ensuring other industry standard encryption techniques are utilized to protect data during transport if SSL or TLS are not available. Ensuring only accepted encryption standards are used and avoid using proprietary encryption protocols. Ensuring the message payload encryptionEnsuring the secure encryption key handshaking. Ensuring received data integrity verification. [4]"
                },
                {
                  "ruleId": "4.3",
                  "title": "Insufficient Session-ID Length",
                  "type": "Elevation of privilege",
                  "status": "Open",
                  "severity": "High",
                  "description": "Session identifiers should be at least 128 bits long to prevent brute-force session guessing attacks. A shorter session identifier leaves the application open to brute-force session guessing attacks. If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking).  [7]",
                  "mitigation": "Session identifiers should be at least 128 bits long to prevent brute-force session guessing.  Assume a 128-bit session identifier that provides 64 bits of entropy.  With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed.  Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years. A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment.  However, any users that abandon their sessions without logging out will increase this number.  (This is one of many good reasons to have a short inactive session timeout. )[7]"
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "ae2338b6-9abf-42ab-aca5-9bf209a12e57"
              },
              "target": {
                "id": "50a179fa-407d-4a00-b775-e67ec4fd48e7"
              },
              "vertices": [
                {
                  "x": 673,
                  "y": 143
                }
              ],
              "id": "3a4dd18a-677d-453f-a58d-e34756cbc90c",
              "labels": [
                {
                  "position": {
                    "distance": 0.37521194545892816,
                    "offset": 8.234254532959312
                  },
                  "attrs": {
                    "text": {
                      "text": "Message",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 16,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "title": "Data flow should use HTTP/S",
                  "type": "Information disclosure",
                  "description": "These requests are made over the public internet and could be intercepted by an attacker.",
                  "mitigation": "The requests should require HTTP/S. This will provide confidentiality and integrity. HTTP should not be supported."
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Flow",
              "smooth": true,
              "source": {
                "id": "255893f4-89e0-4e62-be74-acb98054d4bd"
              },
              "target": {
                "id": "ae2338b6-9abf-42ab-aca5-9bf209a12e57"
              },
              "vertices": [
                {
                  "x": 523,
                  "y": 94
                }
              ],
              "id": "bdef3299-7faa-48cd-86c8-2121a545bb87",
              "labels": [
                {
                  "position": 0.5,
                  "attrs": {
                    "text": {
                      "text": "Put Message",
                      "font-weight": "400",
                      "font-size": "small"
                    }
                  }
                }
              ],
              "z": 17,
              "hasOpenThreats": true,
              "threats": [
                {
                  "status": "Open",
                  "severity": "High",
                  "title": "Data flow should use HTTP/S",
                  "type": "Information disclosure",
                  "description": "These requests are made over the public internet and could be intercepted by an attacker.",
                  "mitigation": "The requests should require HTTP/S. This will provide confidentiality and integrity. HTTP should not be supported."
                }
              ],
              "attrs": {
                ".marker-target": {
                  "class": "marker-target hasOpenThreats isInScope"
                },
                ".connection": {
                  "class": "connection hasOpenThreats isInScope"
                }
              }
            },
            {
              "type": "tm.Boundary",
              "smooth": true,
              "source": {
                "x": 414,
                "y": 19
              },
              "target": {
                "x": 586,
                "y": 154
              },
              "vertices": [
                {
                  "x": 448,
                  "y": 141
                }
              ],
              "id": "87ffd8e0-2621-43ce-b024-458622a726d1",
              "z": 18,
              "attrs": {}
            },
            {
              "type": "tm.Boundary",
              "smooth": true,
              "source": {
                "x": 881,
                "y": 179
              },
              "target": {
                "x": 659,
                "y": 188
              },
              "vertices": [
                {
                  "x": 761,
                  "y": 129
                }
              ],
              "id": "478a0205-61b6-47b3-8c83-2708f37fbca8",
              "z": 19,
              "attrs": {}
            },
            {
              "type": "tm.Boundary",
              "smooth": true,
              "source": {
                "x": 136,
                "y": 233
              },
              "target": {
                "x": 301,
                "y": 148
              },
              "vertices": [
                {
                  "x": 193,
                  "y": 149
                }
              ],
              "id": "1eaf265d-fe4f-446b-a57a-cf27446f253e",
              "z": 20,
              "attrs": {}
            },
            {
              "type": "tm.Boundary",
              "smooth": true,
              "source": {
                "x": 624,
                "y": 446
              },
              "target": {
                "x": 296,
                "y": 375
              },
              "vertices": [
                {
                  "x": 536,
                  "y": 235
                }
              ],
              "id": "94860a77-ebda-4eeb-8db2-5fc647917f62",
              "z": 21,
              "attrs": {}
            }
          ]
        }
      }
    ]
  }
}